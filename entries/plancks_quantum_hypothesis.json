{
  "result_id": "plancks_quantum_hypothesis",
  "result_name": "Planck's Quantum Hypothesis",
  "result_equations": [
    {
      "id": "eq1",
      "equation": "E = h * f"
    },
    {
      "id": "eq2",
      "equation": "E = n * h * f"
    }
  ],
  "explanation": "Planck's quantum hypothesis revolutionized physics by proposing that electromagnetic energy is emitted and absorbed in discrete packets called quanta, with energy proportional to frequency. This fundamental relation ended the ultraviolet catastrophe of classical physics and birthed quantum mechanics. It explains the photoelectric effect, atomic spectra, and provides the foundation for all quantum phenomena.",
  "definitions": [
    {
      "symbol": "E",
      "definition": "Energy of a single quantum (photon) or system of quanta."
    },
    {
      "symbol": "h",
      "definition": "Planck's constant (`6.626 × 10^-34 J⋅s`)."
    },
    {
      "symbol": "f",
      "definition": "Frequency of the electromagnetic radiation."
    },
    {
      "symbol": "n",
      "definition": "Number of quanta (positive integer: 1, 2, 3, ...)."
    }
  ],
  "assumptions": [
    {
      "id": "assumption1",
      "text": "Energy exchange between matter and electromagnetic radiation occurs in discrete packets."
    },
    {
      "id": "assumption2",
      "text": "The energy of each quantum is proportional to the frequency of the radiation."
    },
    {
      "id": "assumption3",
      "text": "For equation `eq2`, `n` is a positive integer representing the number of quanta."
    },
    {
      "id": "assumption4",
      "text": "Planck's constant `h` is a universal constant of nature."
    },
    {
      "id": "assumption5",
      "text": "Classical electromagnetic field theory correctly describes the density of modes in frequency space."
    },
    {
      "id": "assumption6",
      "text": "The ultraviolet catastrophe indicates that classical equipartition theorem fails for electromagnetic radiation."
    },
    {
      "id": "assumption7",
      "text": "Energy levels of harmonic oscillators are quantized in integer multiples of `hf`."
    },
    {
      "id": "assumption8",
      "text": "The system is in thermal equilibrium and follows Boltzmann statistics."
    }
  ],
  "derivation": [
    {
      "step": 1,
      "description": "Start with the classical expression for energy density, where the average energy per mode needs to be determined.",
      "equation": "u(f, T) = (8*pi*f^2)/c^3 * <E>"
    },
    {
      "step": 2,
      "description": "Classical equipartition theorem assigns `k_B*T` energy to each oscillator mode.",
      "equation": "<E> = k_B*T"
    },
    {
      "step": 3,
      "description": "This leads to the Rayleigh-Jeans law for blackbody radiation.",
      "equation": "u(f, T) = (8*pi*f^2*k_B*T)/c^3"
    },
    {
      "step": 4,
      "description": "The classical result diverges when integrated over all frequencies (ultraviolet catastrophe).",
      "equation": "int_0^infinity u(f, T) df = infinity"
    },
    {
      "step": 5,
      "description": "Planck's revolutionary hypothesis: energy levels are discrete, with spacing `epsilon`.",
      "equation": "E_n = n * epsilon"
    },
    {
      "step": 6,
      "description": "The energy quantum is proportional to frequency, defining Planck's constant.",
      "equation": "epsilon = h * f"
    },
    {
      "step": 7,
      "description": "Each oscillator can have energy `0, hf, 2hf, 3hf, ...`",
      "equation": "E_n = n * h * f"
    },
    {
      "step": 8,
      "description": "Calculate the thermal average energy using Boltzmann statistics for discrete levels.",
      "equation": "<E> = (sum_{n=0}^infinity E_n * e^(-E_n/(k_B*T)))/(sum_{n=0}^infinity e^(-E_n/(k_B*T)))"
    },
    {
      "step": 9,
      "description": "Substitute the quantized energy levels into the partition function.",
      "equation": "<E> = (sum_{n=0}^infinity n*h*f * e^(-n*h*f/(k_B*T)))/(sum_{n=0}^infinity e^(-n*h*f/(k_B*T)))"
    },
    {
      "step": 10,
      "description": "Introduce dimensionless variable to simplify the calculation.",
      "equation": "x = h*f/(k_B*T)"
    },
    {
      "step": 11,
      "description": "Factor out common terms and express as ratio of geometric series.",
      "equation": "<E> = (h*f * sum_{n=0}^infinity n * e^(-n*x))/(sum_{n=0}^infinity e^(-n*x))"
    },
    {
      "step": 12,
      "description": "Evaluate the denominator using the geometric series formula.",
      "equation": "sum_{n=0}^infinity e^(-n*x) = 1/(1 - e^(-x))"
    },
    {
      "step": 13,
      "description": "Evaluate the numerator by differentiating the geometric series.",
      "equation": "sum_{n=0}^infinity n * e^(-n*x) = e^(-x)/(1 - e^(-x))^2"
    },
    {
      "step": 14,
      "description": "Combine the results and simplify the expression.",
      "equation": "<E> = h*f * (e^(-x)/(1 - e^(-x))^2) * (1 - e^(-x))"
    },
    {
      "step": 15,
      "description": "Further simplify by canceling common factors.",
      "equation": "<E> = h*f * e^(-x)/(1 - e^(-x))"
    },
    {
      "step": 16,
      "description": "Obtain Planck's formula for the average energy of a quantum harmonic oscillator.",
      "equation": "<E> = h*f/(e^(h*f/(k_B*T)) - 1)"
    }
  ],
  "programmatic_verification": {
    "language": "python 3.11.12",
    "library": "sympy 1.12.0",
    "code": [
      "import sympy as sp",
      "",
      "# Define symbols",
      "h, f, k_B, T, n, x = sp.symbols('h f k_B T n x', positive=True, real=True)",
      "E = sp.symbols('E', real=True)",
      "",
      "# Step 6-7: Planck's quantization",
      "E_quantum = h * f",
      "E_n = n * h * f",
      "",
      "# Step 10: Dimensionless variable",
      "x_def = h * f / (k_B * T)",
      "",
      "# Step 12: Geometric series sum",
      "# Sum from n=0 to infinity of e^(-nx) = 1/(1-e^(-x))",
      "denominator = 1 / (1 - sp.exp(-x))",
      "",
      "# Step 13: Derivative of geometric series for numerator",
      "# Sum from n=0 to infinity of n*e^(-nx) = e^(-x)/(1-e^(-x))^2",
      "numerator_sum = sp.exp(-x) / (1 - sp.exp(-x))**2",
      "",
      "# Step 14-16: Calculate average energy",
      "average_energy = h * f * numerator_sum * (1 - sp.exp(-x))",
      "average_energy_simplified = sp.simplify(average_energy)",
      "",
      "# Expected result: hf/(e^(hf/kT) - 1)",
      "expected_result = h * f / (sp.exp(h*f/(k_B*T)) - 1)",
      "",
      "# Substitute x back",
      "average_energy_substituted = average_energy_simplified.subs(x, h*f/(k_B*T))",
      "",
      "# Verify they are equal",
      "difference = sp.simplify(average_energy_substituted - expected_result)",
      "assert difference == 0",
      "",
      "# Test classical limit: hf << kT (x << 1)",
      "# In this limit, e^x ≈ 1 + x, so e^x - 1 ≈ x",
      "# Therefore <E> ≈ hf/x = hf/(hf/kT) = kT",
      "classical_limit = expected_result.series(x, 0, 2).removeO()",
      "expected_classical = k_B * T",
      "",
      "# Verify classical limit",
      "classical_diff = sp.simplify(classical_limit.subs(x, h*f/(k_B*T)) - expected_classical)",
      "# The leading term should be kT",
      "",
      "# Test high frequency limit: hf >> kT (x >> 1)",
      "# In this limit, e^(-x) → 0, so <E> ≈ hf*e^(-x) → 0",
      "# This prevents the ultraviolet catastrophe",
      "",
      "# Test photoelectric effect: E_photon = hf",
      "photon_energy = h * f",
      "assert photon_energy == E_quantum",
      "",
      "# Verify quantization for multiple quanta",
      "E_2_quanta = 2 * h * f",
      "E_3_quanta = 3 * h * f",
      "assert E_2_quanta == E_n.subs(n, 2)",
      "assert E_3_quanta == E_n.subs(n, 3)"
    ]
  },
  "domain": "quant-ph",
  "theory_status": "historical",
  "references": [
    {
      "id": "R1",
      "citation": "Planck, M. (1900). 'Über das Gesetz der Energieverteilung im Normalspektrum.' Annalen der Physik, 4, 553-563."
    },
    {
      "id": "R2",
      "citation": "Einstein, A. (1905). 'Über einen die Erzeugung und Verwandlung des Lichtes betreffenden heuristischen Gesichtspunkt.' Annalen der Physik, 17, 132-148."
    }
  ],
  "dependencies": [
    "planck_radiation_law"
  ],
  "contributors": [
    {
      "full_name": "Synthetic entry",
      "identifier": "created with AI, may have mistakes. Looking for contributors to review all fields"
    }
  ],
  "review_status": "draft"
}