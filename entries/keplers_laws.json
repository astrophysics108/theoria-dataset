{
  "result_id": "keplers_laws",
  "result_name": "Kepler's Laws of Planetary Motion",
  "result_equations": [
    {
      "id": "eq1",
      "equation": "r = (a*(1-e^2))/(1 + e*cos(theta))"
    },
    {
      "id": "eq2",
      "equation": "(dA)/(dt) = (L)/(2*m) = text{constant}"
    },
    {
      "id": "eq3",
      "equation": "T^2 = (4*pi^2*a^3)/(G*M)"
    }
  ],
  "explanation": "Kepler's three laws describe planetary motion around the Sun: orbits are ellipses with the Sun at one focus, planets sweep equal areas in equal times, and the square of orbital period is proportional to the cube of the semi-major axis. These empirical laws provided the foundation for Newton's law of gravitation and remain fundamental to celestial mechanics and orbital dynamics.",
  "definitions": [
    {
      "symbol": "r",
      "definition": "Distance from the focus (Sun) to the planet at angle `theta`."
    },
    {
      "symbol": "a",
      "definition": "Semi-major axis of the elliptical orbit."
    },
    {
      "symbol": "e",
      "definition": "Eccentricity of the ellipse (0 ≤ e < 1 for bound orbits)."
    },
    {
      "symbol": "theta",
      "definition": "True anomaly (angle from periapsis to current position)."
    },
    {
      "symbol": "A",
      "definition": "Area swept by the radius vector."
    },
    {
      "symbol": "L",
      "definition": "Angular momentum of the planet."
    },
    {
      "symbol": "m",
      "definition": "Mass of the planet."
    },
    {
      "symbol": "T",
      "definition": "Orbital period of the planet."
    },
    {
      "symbol": "G",
      "definition": "Gravitational constant."
    },
    {
      "symbol": "M",
      "definition": "Mass of the central body (Sun)."
    }
  ],
  "assumptions": [
    {
      "id": "assumption1",
      "text": "Classical mechanics framework: relativistic effects are negligible for typical planetary orbital velocities `v < < c`, and quantum effects are negligible for macroscopic celestial bodies, allowing application of Newton's laws."
    },
    {
      "id": "assumption2",
      "text": "Newton's law of universal gravitation: the gravitational force between two point masses is `F = G*M*m/r^2` directed along the line connecting them, where `G` is the gravitational constant."
    },
    {
      "id": "assumption3",
      "text": "Two-body problem: only gravitational interaction between the central body and orbiting body is considered, neglecting all other gravitational perturbations from other celestial bodies."
    },
    {
      "id": "assumption4",
      "text": "Point mass approximation: both the central body and orbiting body can be treated as point masses located at their centers of mass, with spherically symmetric mass distributions."
    },
    {
      "id": "assumption5",
      "text": "Central body dominance: the central body (Sun) mass `M > > m` where `m` is the planet mass, allowing treatment of the central body as effectively fixed at the origin (reduced mass approximation)."
    },
    {
      "id": "assumption6",
      "text": "Rotational dynamics relation: the time rate of change of angular momentum equals the applied torque, `dot(vec(L)) = vec(tau)`."
    }
  ],
  "derivation": [
    {
      "step": 1,
      "description": "Start with Newton's law of gravitation as the central force (assumption 2). Here `vec(F)` is the force vector, `vec(r)` is the position vector from Sun to planet, `r = |vec(r)|` is the distance, and `hat(r) = vec(r)/r` is the unit vector in the radial direction.",
      "equation": "vec(F) = -G*M*m/r^2 * hat(r)"
    },
    {
      "step": 2,
      "description": "Calculate torque: since `vec(F)` is parallel to `vec(r)` (both along radial direction), their cross product `vec(tau) = vec(r) times vec(F)` is zero.",
      "equation": "vec(tau) = vec(r) times vec(F) = vec(r) times (-G*M*m/r^2 * hat(r)) = 0"
    },
    {
      "step": 3,
      "description": "Apply the fundamental relation `dot(vec(L)) = vec(tau)` from rotational dynamics (assumption 6) and substitute `vec(tau) = 0` from step 2: since torque is zero, the time derivative of angular momentum is zero.",
      "equation": "dot(vec(L)) = vec(tau) = 0"
    },
    {
      "step": 4,
      "description": "Since `dot(vec(L)) = 0`, integrating with respect to time gives `vec(L) = text{constant}` - this proves conservation of angular momentum for central forces.",
      "equation": "vec(L) = vec(r) times vec(p) = text{constant}"
    },
    {
      "step": 5,
      "description": "Use the definition of angular momentum magnitude for a point mass: `L = m*r^2*dot(theta)` where `dot(theta)` is the angular velocity.",
      "equation": "L = m*r^2*dot(theta)"
    },
    {
      "step": 6,
      "description": "Kepler's 2nd law: using the area formula for circular sectors `dA = 1/2*r^2*d theta` and substituting angular momentum, the areal velocity `dot(A) = L/(2*m)` is constant.",
      "equation": "dot(A) = 1/2*r^2*dot(theta) = L/(2*m)"
    },
    {
      "step": 7,
      "description": "Newton's law for a test mass in the gravitational field of mass `M`.",
      "equation": "ddot(vec(r)) = -G*M/r^2 * hat(r)"
    },
    {
      "step": 8,
      "description": "In plane polar coordinates, acceleration decomposes into radial and tangential components.",
      "equation": "ddot(vec(r)) = (ddot(r) - r*dot(theta)^2)*hat(r) + (r*ddot(theta) + 2*dot(r)*dot(theta))*hat(theta)"
    },
    {
      "step": 9,
      "description": "Central force implies the tangential component must vanish, giving the angular momentum conservation condition.",
      "equation": "r*ddot(theta) + 2*dot(r)*dot(theta) = 0"
    },
    {
      "step": 10,
      "description": "The tangential equation can be written as a time derivative of `r^2*dot(theta)`.",
      "equation": "(d)/(dt)(r^2*dot(theta)) = 0"
    },
    {
      "step": 11,
      "description": "Define specific angular momentum `h = r^2*dot(theta)` which is conserved for central forces.",
      "equation": "h := r^2*dot(theta) = text{constant}"
    },
    {
      "step": 12,
      "description": "Match the radial component to the gravitational force.",
      "equation": "ddot(r) - r*dot(theta)^2 = -G*M/r^2"
    },
    {
      "step": 13,
      "description": "Substitute `dot(theta) = h/r^2` from angular momentum conservation.",
      "equation": "ddot(r) - r*(h^2/r^4) = -G*M/r^2"
    },
    {
      "step": 14,
      "description": "Simplify the radial equation of motion.",
      "equation": "ddot(r) - h^2/r^3 = -G*M/r^2"
    },
    {
      "step": 15,
      "description": "Binet substitution: let `u = 1/r` and calculate derivatives using `dot(theta) = h*u^2`.",
      "equation": "u = 1/r; dot(r) = -h*(du)/(d theta); ddot(r) = -h^2*u^2*(d^2 u)/(d theta^2)"
    },
    {
      "step": 16,
      "description": "Express the centrifugal term in terms of `u`.",
      "equation": "r*dot(theta)^2 = (1/u)*(h^2*u^4) = h^2*u^3"
    },
    {
      "step": 17,
      "description": "Substitute all expressions into the radial equation.",
      "equation": "(-h^2*u^2*(d^2 u)/(d theta^2)) - h^2*u^3 = -G*M*u^2"
    },
    {
      "step": 18,
      "description": "Simplify to get the standard orbital differential equation.",
      "equation": "(d^2 u)/(d theta^2) + u = G*M/h^2"
    },
    {
      "step": 19,
      "description": "General solution to the linear ODE with constant coefficient.",
      "equation": "u(theta) = G*M/h^2 + C*cos(theta - theta_0)"
    },
    {
      "step": 20,
      "description": "Choose coordinates so periapsis is at `theta = 0` and define eccentricity `e = C*h^2/(G*M)`.",
      "equation": "u(theta) = (G*M/h^2)*(1 + e*cos(theta))"
    },
    {
      "step": 21,
      "description": "Invert to get `r(theta)` and define semi-latus rectum `p = h^2/(G*M)`.",
      "equation": "r(theta) = h^2/(G*M*(1 + e*cos(theta)))"
    },
    {
      "step": 22,
      "description": "Standard conic section form with semi-latus rectum `p`.",
      "equation": "p := h^2/(G*M); r(theta) = p/(1 + e*cos(theta))"
    },
    {
      "step": 23,
      "description": "For ellipse case (`e < 1`), calculate periapsis and apoapsis radii.",
      "equation": "r_p = p/(1 + e); r_a = p/(1 - e)"
    },
    {
      "step": 24,
      "description": "Semi-major axis is the average of periapsis and apoapsis radii, giving `p = a*(1-e^2)`.",
      "equation": "a = (r_p + r_a)/2 = p/(1 - e^2)"
    },
    {
      "step": 25,
      "description": "Kepler's First Law: substitute `p = a*(1-e^2)` to get the standard ellipse equation.",
      "equation": "r(theta) = (a*(1 - e^2))/(1 + e*cos(theta))"
    },
    {
      "step": 26,
      "description": "From `p = h^2/(G*M)` and `p = a*(1-e^2)`, we get the relationship between specific angular momentum and orbital parameters.",
      "equation": "h^2 = G*M*a*(1 - e^2)"
    },
    {
      "step": 27,
      "description": "Total area of the ellipse with semi-major axis `a` and semi-minor axis `b = a*sqrt(1-e^2)`.",
      "equation": "A_text{ellipse} = pi*a*b = pi*a^2*sqrt(1 - e^2)"
    },
    {
      "step": 28,
      "description": "Period is total area divided by areal velocity. Use `dot(A) = h/2` from Kepler's 2nd law.",
      "equation": "T = A_text{ellipse} / dot(A) = (pi*a^2*sqrt(1 - e^2)) / (h/2)"
    },
    {
      "step": 29,
      "description": "Simplify the period expression.",
      "equation": "T = (2*pi*a^2*sqrt(1 - e^2)) / h"
    },
    {
      "step": 30,
      "description": "Substitute `h = sqrt(G*M*a*(1-e^2))` from step 26.",
      "equation": "T = (2*pi*a^2*sqrt(1 - e^2)) / sqrt(G*M*a*(1 - e^2))"
    },
    {
      "step": 31,
      "description": "Cancel the `sqrt(1-e^2)` terms to get the period in terms of `a`, `G`, and `M` only.",
      "equation": "T = (2*pi*a^(3/2)) / sqrt(G*M)"
    },
    {
      "step": 32,
      "description": "Kepler's Third Law: square both sides to get the final relationship `T^2 ∝ a^3`.",
      "equation": "T^2 = (4*pi^2*a^3) / (G*M)"
    }
  ],
  "programmatic_verification": {
    "language": "python 3.11.12",
    "library": "sympy 1.12.0",
    "code": [
      "import sympy as sp",
      "",
      "# Define symbols",
      "r, a, e, theta, L, m, t, T, G, M, u, E, h, p, b = sp.symbols('r a e theta L m t T G M u E h p b', positive=True, real=True)",
      "pi = sp.pi",
      "",
      "# Steps 1-2: Newton's law of gravitation and torque calculation",
      "F_grav = G*M*m/r**2",
      "# Central force means tau = r x F = 0 (parallel vectors)",
      "",
      "# Steps 3-4: Angular momentum conservation",
      "# From dot(L) = tau = 0, we get L = constant",
      "L_magnitude = m*r**2*sp.Symbol('omega')",
      "",
      "# Steps 5-6: Angular momentum and areal velocity",
      "# L = m*r²*dot(theta) and dot(A) = (1/2)*r²*dot(theta) = L/(2*m)",
      "omega_from_L = L/(m*r**2)",
      "areal_velocity = L/(2*m)",
      "dot_A_direct = sp.Rational(1,2)*r**2*omega_from_L",
      "assert sp.simplify(dot_A_direct - areal_velocity) == 0",
      "",
      "# Steps 7-11: Polar coordinates and specific angular momentum",
      "# From central force: d/dt(r²*dot(theta)) = 0",
      "# So h := r²*dot(theta) = constant (specific angular momentum)",
      "h_def = r**2*omega_from_L",
      "h_simplified = L/m",
      "assert sp.simplify(h_def - h_simplified) == 0",
      "",
      "# Steps 12-14: Radial equation of motion",
      "# ddot(r) - h²/r³ = -GM/r²",
      "",
      "# Step 15: Binet substitution u = 1/r",
      "u_def = 1/r",
      "r_from_u = 1/u",
      "assert sp.simplify(r_from_u.subs(u, u_def) - r) == 0",
      "",
      "# Steps 16-18: Transform to orbital differential equation",
      "# Final form: d²u/dθ² + u = GM/h²",
      "orbital_eq_rhs = G*M/h**2",
      "",
      "# Steps 19-20: Solution of orbital equation",
      "# u(theta) = (GM/h²)*(1 + e*cos(theta))",
      "u_solution = orbital_eq_rhs*(1 + e*sp.cos(theta))",
      "",
      "# Steps 21-22: Convert back to r(theta) and define semi-latus rectum",
      "# r(theta) = h²/(GM*(1 + e*cos(theta)))",
      "# p := h²/(GM), so r(theta) = p/(1 + e*cos(theta))",
      "p_def = h**2/(G*M)",
      "r_conic = p_def/(1 + e*sp.cos(theta))",
      "",
      "# Steps 23-25: Ellipse parameters and Kepler's 1st law",
      "# For ellipse: a = p/(1-e²), so p = a*(1-e²)",
      "# Final form: r(theta) = a*(1-e²)/(1 + e*cos(theta))",
      "p_ellipse = a*(1 - e**2)",
      "r_kepler1 = (a*(1-e**2))/(1 + e*sp.cos(theta))",
      "",
      "# Verify consistency: p_def = p_ellipse",
      "# This gives us h² = GM*a*(1-e²)",
      "",
      "# Step 26: Relationship h² = GM*a*(1-e²)",
      "h_squared_orbital = G*M*a*(1 - e**2)",
      "h_from_orbital = sp.sqrt(h_squared_orbital)",
      "",
      "# Step 27: Ellipse area A = π*a*b where b = a*sqrt(1-e²)",
      "b_def = a*sp.sqrt(1 - e**2)",
      "A_ellipse = pi*a*b_def",
      "A_expanded = pi*a**2*sp.sqrt(1 - e**2)",
      "assert sp.simplify(A_ellipse - A_expanded) == 0",
      "",
      "# Step 28: Period from T = A_ellipse / dot(A)",
      "# Using dot(A) = h/2 from Kepler's 2nd law",
      "T_from_area = A_ellipse / (h/2)",
      "T_step28 = (2*pi*a**2*sp.sqrt(1 - e**2)) / h",
      "assert sp.simplify(T_from_area - T_step28) == 0",
      "",
      "# Step 29: Already simplified in step 28",
      "",
      "# Step 30: Substitute h = sqrt(GM*a*(1-e²))",
      "T_step30 = T_step28.subs(h, h_from_orbital)",
      "T_substituted = (2*pi*a**2*sp.sqrt(1 - e**2)) / sp.sqrt(G*M*a*(1 - e**2))",
      "assert sp.simplify(T_step30 - T_substituted) == 0",
      "",
      "# Step 31: Cancel sqrt(1-e²) terms",
      "T_step31 = (2*pi*a**(sp.Rational(3,2))) / sp.sqrt(G*M)",
      "T_simplified = sp.simplify(T_substituted)",
      "assert sp.simplify(T_simplified - T_step31) == 0",
      "",
      "# Step 32: Square to get Kepler's 3rd law",
      "T_squared = T_step31**2",
      "T_squared_kepler3 = (4*pi**2*a**3)/(G*M)",
      "assert sp.simplify(T_squared - T_squared_kepler3) == 0",
      "",
      "# Verify special cases of Kepler's 1st law",
      "# At periapsis (θ = 0): r = a(1-e)",
      "r_periapsis = r_kepler1.subs(theta, 0)",
      "expected_periapsis = a*(1-e)",
      "assert sp.simplify(r_periapsis - expected_periapsis) == 0",
      "",
      "# At apoapsis (θ = π): r = a(1+e)",
      "r_apoapsis = r_kepler1.subs(theta, pi)",
      "expected_apoapsis = a*(1+e)",
      "assert sp.simplify(r_apoapsis - expected_apoapsis) == 0",
      "",
      "# Circular orbit limit (e = 0): r = a",
      "r_circular = r_kepler1.subs(e, 0)",
      "assert sp.simplify(r_circular - a) == 0",
      "",
      "# Verify Kepler's 3rd law with solar system data",
      "# Earth: a ≈ 1 AU, T ≈ 1 year",
      "# Mars: a ≈ 1.52 AU, T ≈ 1.88 years",
      "a_earth, a_mars = 1, sp.Rational(152, 100)",
      "T_earth, T_mars = 1, sp.Rational(188, 100)",
      "",
      "# Test T₁²/T₂² = a₁³/a₂³",
      "ratio_periods = T_earth**2 / T_mars**2",
      "ratio_distances = a_earth**3 / a_mars**3",
      "difference = abs(float(ratio_periods - ratio_distances))",
      "assert difference < 0.01  # Within 1% accuracy",
      "",
      "print('All Kepler laws verified successfully!')",
      "print(f'Kepler 1st law: r(θ) = a(1-e²)/(1+e cos θ)')",
      "print(f'Kepler 2nd law: dA/dt = L/(2m) = h/2 = constant')",
      "print(f'Kepler 3rd law: T² = 4π²a³/(GM)')"
    ]
  },
  "domain": "astro-ph",
  "theory_status": "historical",
  "validity_regime": {
    "conditions": [
      "Two-body gravitational systems",
      "Central massive body much larger than orbiting body",
      "Elliptical orbits in inverse-square force field",
      "No relativistic effects"
    ],
    "limitations": [
      "Empirical laws without underlying force explanation",
      "Limited to two-body problems",
      "Does not account for perturbations from other bodies",
      "No relativistic corrections included"
    ]
  },
  "superseded_by": [
    "newtonian_gravitation",
    "general_relativity"
  ],
  "historical_context": {
    "importance": "First accurate description of planetary motion, led to Newton's universal gravitation",
    "development_period": "1609-1619",
    "key_insights": [
      "Elliptical orbits replace circular ones",
      "Area law reveals non-uniform motion",
      "Period-distance mathematical relationship"
    ]
  },
  "references": [
    {
      "id": "R1",
      "citation": "Kepler, J. (1609). Astronomia Nova. Heidelberg: Gotthard Vögelin."
    },
    {
      "id": "R2",
      "citation": "Newton, I. (1687). Philosophiæ Naturalis Principia Mathematica. Joseph Streater."
    }
  ],
  "dependencies": [
    "newtonian_mechanics",
    "conservation_laws"
  ],
  "contributors": [
    {
      "full_name": "Manuel Sánchez Hernández",
      "identifier": "ORCID 0009-0006-4904-3695"
    }
  ],
  "review_status": "reviewed"
}